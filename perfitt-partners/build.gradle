apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

group = rootProject.ext.packageName
version = rootProject.ext.libraryVersionName

// Local aar info
install {
    repositories.mavenInstaller {
        pom.project {
            name project.name
            description rootProject.ext.description
            url rootProject.ext.websiteUrl
            inceptionYear '2020' // release date

            // gradle dependency
            // ex) compile 'tech.thdev:bintray-sample:0.0.1'
            packaging 'aar'
            groupId rootProject.ext.packageName // compile 'tech.thdev:
            artifactId project.name
            version rootProject.ext.libraryVersionName // :0.0.1-alpha

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            scm { // Optional setting
                connection rootProject.ext.githubRepoUrl
                developerConnection rootProject.ext.githubRepoUrl
                url rootProject.ext.websiteUrl
            }

            developers { // Optional setting
                developer {
                    id 'dony'
                    name 'dony'
                    email 'admin@perfitt.io'
                }
            }
        }
    }
}

// Bintray setting... and upload
bintray {
//    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
//    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
//    user = 'dony'
//    key = 'bb303570cdc43ed61ad1bb0c1eac75bd1b47a633'
    user = BINTRAY_USER
    key = BINTRAY_API_KEY
//    publications = ['mavenJava']  // When uploading Maven-based publication files
    configurations = ['archives'] // When uploading configuration files

    publish = true // [Default: false] Whether version should be auto published after an upload

    pkg {
        repo = rootProject.ext.repositoryName
        // Repository name (Created in the repository Bintray site)
        name = project.name// module name
        userOrg = user
        // An optional organization name when the repo belongs to one of the user's orgs
        desc = 'Bintray sample library' // Optional
        licenses = ['Apache-2.0']

        vcsUrl = rootProject.ext.githubRepoUrl
        websiteUrl = rootProject.ext.websiteUrl
        // issueTrackerUrl = '' // Optional

        labels = ['aar', 'android', 'example'] // Optional
        publicDownloadNumbers = true

        githubRepo = rootProject.ext.githubRepo // Optional Github repository
        githubReleaseNotesFile = rootProject.ext.githubReleaseNotesFile
        // Optional Github readme file

        version {
            name = rootProject.ext.libraryVersionName // The name of your library project
            desc = rootProject.ext.description // Optional - Version-specific description'
            released = new Date()
            // Optional - Date of the version release. 2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            vcsTag = rootProject.ext.libraryVersionName
        }
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.libraryVersionName

        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation rootProject.ext.kotlin
    implementation rootProject.ext.ktx
    implementation rootProject.ext.appcompat
    implementation rootProject.ext.constraintlayout
    implementation 'org.tensorflow:tensorflow-lite-support:0.0.0-nightly'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'
}

// JCenter publish
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

// Optional docs
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

// Optional javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
//    archives javadocJar // Optional
    archives sourcesJar
}

//task findConventions << {
//    println project.getConvention()
//}